# name: iOS Build and Deploy

# on:
#   push:
#     branches:
#       - main

# jobs:
#   build:
#     runs-on: macos-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Setup Ruby
#         uses: ruby/setup-ruby@v1
#         with:
#           ruby-version: '3.0'

#       - name: Install bundler
#         run: gem install bundler

#     #   - name: Install dependencies
#     #     run: |
#     #       cd ${{ github.workspace }}
#     #       bundle config path vendor/bundle
#     #       bundle install --jobs 4 --retry 3

#       - name: Build and deploy iOS app
#         uses: vfrascello/xcode-deploy@v1.5
#         with:
#           xcode-version: '14.0'
#           configuration: 'Release'
#           scheme: 'AutomateCD'
#           path-to-export-options: '../../ExportOptions.plist'
#           update-build: true
#           install-pods: false
#           resolve-package-dependencies: true
#           distribution-certificate-p12: ${{ secrets.DISTRIBUTION_CERTIFICATE_P12 }}
#           distribution-certificate-password: ${{ secrets.DISTRIBUTION_CERTIFICATE_PASSWORD }}
#           app-store-provisioning-profile: ${{ secrets.APPSTORE_PROVISIONING_PROFILE}}
#           auth-key-id: ${{ secrets.AUTH_KEY_ID }}
#           auth-key-issuer-id: ${{ secrets.AUTH_KEY_ISSUER_ID }}
#           auth-key-p8: ${{ secrets.AUTH_KEY_P8 }}

#       - name: Generate download link
#         id: download-link
#         run: echo "::set-output name=url::https://example.com/path/to/your/ipa"


name: iOS Build and Deployment

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Xcode
        run: |
          sudo xcode-select --switch /Applications/Xcode.app
          sudo xcodebuild -runFirstLaunch

      - name: Install CocoaPods
        run: |
          sudo gem install cocoapods
          pod install

      - name: Build
        env:
          PROVISIONING_PROFILE: ${{ secrets.APPSTORE_PROVISIONING_PROFILE }}
          CERTIFICATE: ${{ secrets.DISTRIBUTION_CERTIFICATE_P12 }}
        run: xcodebuild -workspace AutomateCD.xcworkspace -scheme AutomateCD -configuration Release clean archive -archivePath $PWD/build/AutomateCD -allowProvisioningUpdates PROVISIONING_PROFILE="${PROVISIONING_PROFILE}" CERTIFICATE="${CERTIFICATE}"

      - name: Export IPA
        run: xcodebuild -exportArchive -archivePath $PWD/build/AutomateCD.xcarchive -exportOptionsPlist AutomateCD/ExportOptions.plist -exportPath $PWD/build

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: AutomateCD
          path: $PWD/build/*.ipa
