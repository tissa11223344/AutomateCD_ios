# name: iOS Build and Deploy

# on:
#   push:
#     branches:
#       - main

# jobs:
#   build:
#     runs-on: macos-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Setup Ruby
#         uses: ruby/setup-ruby@v1
#         with:
#           ruby-version: '3.0'

#       - name: Install bundler
#         run: gem install bundler

#     #   - name: Install dependencies
#     #     run: |
#     #       cd ${{ github.workspace }}
#     #       bundle config path vendor/bundle
#     #       bundle install --jobs 4 --retry 3

#       - name: Build and deploy iOS app
#         uses: vfrascello/xcode-deploy@v1.5
#         with:
#           xcode-version: '14.0'
#           configuration: 'Release'
#           scheme: 'AutomateCD'
#           path-to-export-options: '../../ExportOptions.plist'
#           update-build: true
#           install-pods: false
#           resolve-package-dependencies: true
#           distribution-certificate-p12: ${{ secrets.DISTRIBUTION_CERTIFICATE_P12 }}
#           distribution-certificate-password: ${{ secrets.DISTRIBUTION_CERTIFICATE_PASSWORD }}
#           app-store-provisioning-profile: ${{ secrets.APPSTORE_PROVISIONING_PROFILE}}
#           auth-key-id: ${{ secrets.AUTH_KEY_ID }}
#           auth-key-issuer-id: ${{ secrets.AUTH_KEY_ISSUER_ID }}
#           auth-key-p8: ${{ secrets.AUTH_KEY_P8 }}

#       - name: Generate download link
#         id: download-link
#         run: echo "::set-output name=url::https://example.com/path/to/your/ipa"


# 








# name: Build iOS apps

# on:
#   push:
#     paths:
#       - .github/workflows/build.yml

# jobs:
#   build_with_signing:
#     runs-on: macos-latest
#     steps:
#       - name: Check Xcode version
#         run: |
#           xcode_version=$(xcodebuild -version | grep "Xcode")
#           if [[ "$xcode_version" =~ "Xcode 13" || "$xcode_version" =~ "Xcode 14" ]]; then
#             echo "Xcode version is compatible: $xcode_version"
#           else
#             echo "Error: Xcode version $xcode_version is not supported. Please use Xcode 13 or above."
#             exit 1
#           fi
#       - name: Decode export options plist
#         run: |
#           echo "${{ secrets.EXPORT_OPTIONS_PLIST }}" | base64 --decode > ExportOptions.plist
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: Install CocoaPods dependencies
#         run: |
#           gem install cocoapods
#           pod install
#       - name: Install Apple certificate and provisioning profile
#         env:
#           BUILD_CERTIFICATE_BASE64: ${{ secrets.DISTRIBUTION_CERTIFICATE_P12 }}
#           P12_PASSWORD: ${{ secrets.DISTRIBUTION_CERTIFICATE_PASSWORD }}
#           BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.APPSTORE_PROVISIONING_PROFILE }}
#           KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
#         run: |
#           # Create variables
#           CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
#           PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
#           KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
#           # Import certificate and provisioning profile from secrets
#           echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
#           echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
#           # Create temporary keychain
#           security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#           security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
#           security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
#           # Import certificate to keychain
#           security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
#           security list-keychain -d user -s $KEYCHAIN_PATH
#           # Apply provisioning profile
#           mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
#           cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
#       - name: Generate and archive
#         run: |
#           xcodebuild -workspace "AutomateCD.xcworkspace" \
#           -scheme "AutomateCD" \
#           -configuration Debug \
#           -archivePath $RUNNER_TEMP/AutomateCD.xcarchive \
#           clean archive \
#           -allowProvisioningUpdates
#           # Export IPA
#           echo "Runner temp path: $RUNNER_TEMP"
#           xcodebuild -exportArchive -archivePath $RUNNER_TEMP/AutomateCD.xcarchive \
#           -exportOptionsPlist $RUNNER_TEMP/ExportOptions.plist \
#           -exportPath $RUNNER_TEMP/build
#           echo "Runner temp path1: $RUNNER_TEMP"
#           # Move IPA to workspace
#           mv $RUNNER_TEMP/build/AutomateCD.ipa $GITHUB_WORKSPACE
#       - name: Upload IPA as artifact
#         uses: actions/upload-artifact@v2
#         with:
#           name: CICDDemoApp
#           path: $GITHUB_WORKSPACE/AutomateCD.ipa


name: Build iOS apps

on:
  push:
    paths:
      - .github/workflows/build.yml

jobs:
  build_with_signing:
    runs-on: macos-latest
    steps:
      - name: Check Xcode version
        run: |
          xcode_version=$(xcodebuild -version | grep "Xcode")
          if [[ "$xcode_version" =~ "Xcode 13" || "$xcode_version" =~ "Xcode 14" ]]; then
            echo "Xcode version is compatible: $xcode_version"
          else
            echo "Error: Xcode version $xcode_version is not supported. Please use Xcode 13 or above."
            exit 1
          fi
      - name: Decode export options plist
        run: |
          echo "${{ secrets.EXPORT_OPTIONS_PLIST }}" | base64 --decode > ExportOptions.plist
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install CocoaPods dependencies
        run: |
          gem install cocoapods
          pod install
      - name: Install Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.DISTRIBUTION_CERTIFICATE_P12 }}
          P12_PASSWORD: ${{ secrets.DISTRIBUTION_CERTIFICATE_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.APPSTORE_PROVISIONING_PROFILE }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # Import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # Apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - name: Generate and archive
        id: archive
        run: |
          xcodebuild -workspace "AutomateCD.xcworkspace" \
          -scheme "AutomateCD" \
          -configuration Debug \
          -archivePath $RUNNER_TEMP/AutomateCD.xcarchive \
          clean archive \
          -allowProvisioningUpdates
          echo "ARCHIVE_PATH=$RUNNER_TEMP/AutomateCD.xcarchive" >> $GITHUB_ENV
      - name: Export IPA
        run: |
          echo "Runner temp path: $RUNNER_TEMP"
          xcodebuild -exportArchive -archivePath $RUNNER_TEMP/AutomateCD.xcarchive \
          -exportOptionsPlist $RUNNER_TEMP/ExportOptions.plist \
          -exportPath $RUNNER_TEMP/build
          echo "Runner temp path1: $RUNNER_TEMP"
          # Move IPA to workspace
          mv $RUNNER_TEMP/build/AutomateCD.ipa $GITHUB_WORKSPACE
      - name: Upload IPA as artifact
        uses: actions/upload-artifact@v2
        with:
          name: CICDDemoApp
          path: $GITHUB_WORKSPACE/AutomateCD.ipa
